#pragma kernel CSMain

int resolution;
//Resolution squared
int resolution2;

//Update all voxels flag
int updateAll;

//Struct to hold voxel data
struct Voxel
{
    int update;
    int solid;
    float density;
    float4 position;
    int indicy;
};

//Fixed size buffer for all voxels
RWStructuredBuffer<Voxel> voxels;
//Lookup tables
StructuredBuffer<float> tables;

//Struct to hold vert data
struct Vert
{
    float4 position;
    float3 normal;
    int indicy;
};

//Fixed size buffer for verts
RWStructuredBuffer<Vert> verts;

float3 NormalFromEdges(float3 x, float3 y, float3 z)
{
    float3 v = y - x;
    float3 w = z - x;
    
    float3 n = normalize(cross(v, w));
    
    return n;
}

void AddVert(int i, int voxelCoord, float3 position, float3 normal){
    //Check if we have a parent
    if (voxels[voxelCoord].indicy == -1) //We have no parent
    {
        voxels[voxelCoord].indicy = i; //Set this vert to parent vert
        
        //Create a vert
        Vert vert;
        vert.position = float4(position, 1.0);
        vert.normal = normal;
        vert.indicy = i;
        verts[i] = vert;
    }
    else //If we are a child
    {
        int indicy = voxels[voxelCoord].indicy; //Set our indicy to that of our parent
        verts[indicy].position = float4(position, 1.0); //Update position
        //Recalculate Normals
        verts[indicy].normal = normalize(verts[indicy].normal + normal);
        
        //Create a placeholder vert
        Vert vert;
        vert.position = float4(position, 1.0);
        vert.normal = normal;
        vert.indicy = indicy;
        verts[i] = vert;
    }
}

void ResetVert(int i, int voxelCoord)
{
    if (verts[i].indicy != -1) //If there is a vert here
    {
        verts[i].indicy = -1; //Stop this vert from being rendered
    }
}

void UpdateQuad(int i, int aCoord, int bCoord, int cCoord, int dCoord, bool add)
{
    if (add)
    {
        float3 posA = voxels[aCoord].position.xyz;
        float3 posB = voxels[bCoord].position.xyz;
        float3 posC = voxels[cCoord].position.xyz;
        float3 posD = voxels[dCoord].position.xyz;
    
        float3 normalA = NormalFromEdges(posA, posB, posD);
        float3 normalB = NormalFromEdges(posB, posC, posA);
        float3 normalC = NormalFromEdges(posC, posD, posB);
        float3 normalD = NormalFromEdges(posD, posA, posC);
        
        AddVert(i, aCoord, posA, normalA);
        AddVert(i + 1, bCoord, posB, normalB);
        AddVert(i + 2, cCoord, posC, normalC);
        AddVert(i + 3, cCoord, posC, normalC);
        AddVert(i + 4, dCoord, posD, normalD);
        AddVert(i + 5, aCoord, posA, normalA);
    }
    else
    {
        ResetVert(i, aCoord);
        ResetVert(i + 1, bCoord);
        ResetVert(i + 2, cCoord);
        ResetVert(i + 3, cCoord);
        ResetVert(i + 4, dCoord);
        ResetVert(i + 5, aCoord);
    }
}

[numthreads(8, 8, 8)]
void CSMain(int3 id : SV_DispatchThreadID)
{
    //Get index
    int o = (id.x + 1) * resolution2 + (id.y + 1) * resolution + (id.z + 1);
    //If ready for an update
    if (voxels[o].update == 1 || updateAll == 1)
    {
        //offset index as verts are offset due to there being 1 less per row
        o -= resolution2 + resolution + 1;
        //Check to make sure we will stay within grid
        if (id.x < resolution - 2 && id.y < resolution - 2 && id.z < resolution - 2)
        {
            //Cycle through all faces
            for (uint i = 0; i < 6; i++)
            {
                //Get index offsets for each vertex from the lookup tables
                int connectionIndex = i * 4 + 8;
                int aCoord = o + tables[tables[connectionIndex]];
                int bCoord = o + tables[tables[connectionIndex + 1]];
                int cCoord = o + tables[tables[connectionIndex + 2]];
                int dCoord = o + tables[tables[connectionIndex + 3]];
            
                //Flip it and do the same for the opposite face
                int iInverse;
                if (i % 2 == 0)
                {
                    iInverse = i + 1;
                }
                else
                {
                    iInverse = i - 1;
                }
            
                connectionIndex = iInverse * 4 + 8;
                int aCoordInverse = o + tables[tables[connectionIndex]];
                int bCoordInverse = o + tables[tables[connectionIndex + 1]];
                int cCoordInverse = o + tables[tables[connectionIndex + 2]];
                int dCoordInverse = o + tables[tables[connectionIndex + 3]];
            
                //Check if face is pointing out of the object and all verticies are valid
                if (voxels[aCoord].position.w == 1.0 &&
                voxels[bCoord].position.w == 1.0 &&
                voxels[cCoord].position.w == 1.0 &&
                voxels[dCoord].position.w == 1.0 &&
                (voxels[aCoordInverse].position.w == 0 ||
                voxels[bCoordInverse].position.w == 0 ||
                voxels[cCoordInverse].position.w == 0 ||
                voxels[dCoordInverse].position.w == 0))
                {
                    //If yes add a face
                    UpdateQuad((o * 6 + i) * 6, aCoord, bCoord, cCoord, dCoord, true);
                }
                else
                {
                    //If no remove a face
                    UpdateQuad((o * 6 + i) * 6, aCoord, bCoord, cCoord, dCoord, false);
                }
            }
        }
        //Turn the update flag off for this voxel
        voxels[o].update = 0;
    }
}
